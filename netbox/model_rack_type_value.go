/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.2 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// RackTypeValue * `2-post-frame` - 2-post frame * `4-post-frame` - 4-post frame * `4-post-cabinet` - 4-post cabinet * `wall-frame` - Wall-mounted frame * `wall-frame-vertical` - Wall-mounted frame (vertical) * `wall-cabinet` - Wall-mounted cabinet * `wall-cabinet-vertical` - Wall-mounted cabinet (vertical)
type RackTypeValue string

// List of Rack_type_value
const (
	RACKTYPEVALUE__2_POST_FRAME         RackTypeValue = "2-post-frame"
	RACKTYPEVALUE__4_POST_FRAME         RackTypeValue = "4-post-frame"
	RACKTYPEVALUE__4_POST_CABINET       RackTypeValue = "4-post-cabinet"
	RACKTYPEVALUE_WALL_FRAME            RackTypeValue = "wall-frame"
	RACKTYPEVALUE_WALL_FRAME_VERTICAL   RackTypeValue = "wall-frame-vertical"
	RACKTYPEVALUE_WALL_CABINET          RackTypeValue = "wall-cabinet"
	RACKTYPEVALUE_WALL_CABINET_VERTICAL RackTypeValue = "wall-cabinet-vertical"
	RACKTYPEVALUE_EMPTY                 RackTypeValue = ""
	RACKTYPEVALUE_NULL                  RackTypeValue = "null"
)

// All allowed values of RackTypeValue enum
var AllowedRackTypeValueEnumValues = []RackTypeValue{
	"2-post-frame",
	"4-post-frame",
	"4-post-cabinet",
	"wall-frame",
	"wall-frame-vertical",
	"wall-cabinet",
	"wall-cabinet-vertical",
	"",
	"null",
}

func (v *RackTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RackTypeValue(value)
	for _, existing := range AllowedRackTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RackTypeValue", value)
}

// NewRackTypeValueFromValue returns a pointer to a valid RackTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRackTypeValueFromValue(v string) (*RackTypeValue, error) {
	ev := RackTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RackTypeValue: valid values are %v", v, AllowedRackTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RackTypeValue) IsValid() bool {
	for _, existing := range AllowedRackTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Rack_type_value value
func (v RackTypeValue) Ptr() *RackTypeValue {
	return &v
}

type NullableRackTypeValue struct {
	value *RackTypeValue
	isSet bool
}

func (v NullableRackTypeValue) Get() *RackTypeValue {
	return v.value
}

func (v *NullableRackTypeValue) Set(val *RackTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRackTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRackTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackTypeValue(val *RackTypeValue) *NullableRackTypeValue {
	return &NullableRackTypeValue{value: val, isSet: true}
}

func (v NullableRackTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
