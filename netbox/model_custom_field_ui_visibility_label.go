/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.2 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CustomFieldUiVisibilityLabel the model 'CustomFieldUiVisibilityLabel'
type CustomFieldUiVisibilityLabel string

// List of CustomField_ui_visibility_label
const (
	CUSTOMFIELDUIVISIBILITYLABEL_READ_WRITE       CustomFieldUiVisibilityLabel = "Read/write"
	CUSTOMFIELDUIVISIBILITYLABEL_READ_ONLY        CustomFieldUiVisibilityLabel = "Read-only"
	CUSTOMFIELDUIVISIBILITYLABEL_HIDDEN           CustomFieldUiVisibilityLabel = "Hidden"
	CUSTOMFIELDUIVISIBILITYLABEL_HIDDEN__IF_UNSET CustomFieldUiVisibilityLabel = "Hidden (if unset)"
)

// All allowed values of CustomFieldUiVisibilityLabel enum
var AllowedCustomFieldUiVisibilityLabelEnumValues = []CustomFieldUiVisibilityLabel{
	"Read/write",
	"Read-only",
	"Hidden",
	"Hidden (if unset)",
}

func (v *CustomFieldUiVisibilityLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomFieldUiVisibilityLabel(value)
	for _, existing := range AllowedCustomFieldUiVisibilityLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomFieldUiVisibilityLabel", value)
}

// NewCustomFieldUiVisibilityLabelFromValue returns a pointer to a valid CustomFieldUiVisibilityLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomFieldUiVisibilityLabelFromValue(v string) (*CustomFieldUiVisibilityLabel, error) {
	ev := CustomFieldUiVisibilityLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomFieldUiVisibilityLabel: valid values are %v", v, AllowedCustomFieldUiVisibilityLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomFieldUiVisibilityLabel) IsValid() bool {
	for _, existing := range AllowedCustomFieldUiVisibilityLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomField_ui_visibility_label value
func (v CustomFieldUiVisibilityLabel) Ptr() *CustomFieldUiVisibilityLabel {
	return &v
}

type NullableCustomFieldUiVisibilityLabel struct {
	value *CustomFieldUiVisibilityLabel
	isSet bool
}

func (v NullableCustomFieldUiVisibilityLabel) Get() *CustomFieldUiVisibilityLabel {
	return v.value
}

func (v *NullableCustomFieldUiVisibilityLabel) Set(val *CustomFieldUiVisibilityLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldUiVisibilityLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldUiVisibilityLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldUiVisibilityLabel(val *CustomFieldUiVisibilityLabel) *NullableCustomFieldUiVisibilityLabel {
	return &NullableCustomFieldUiVisibilityLabel{value: val, isSet: true}
}

func (v NullableCustomFieldUiVisibilityLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldUiVisibilityLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
