/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.2 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// InterfaceTemplateRfRoleValue * `ap` - Access point * `station` - Station
type InterfaceTemplateRfRoleValue string

// List of InterfaceTemplate_rf_role_value
const (
	INTERFACETEMPLATERFROLEVALUE_AP      InterfaceTemplateRfRoleValue = "ap"
	INTERFACETEMPLATERFROLEVALUE_STATION InterfaceTemplateRfRoleValue = "station"
	INTERFACETEMPLATERFROLEVALUE_EMPTY   InterfaceTemplateRfRoleValue = ""
	INTERFACETEMPLATERFROLEVALUE_NULL    InterfaceTemplateRfRoleValue = "null"
)

// All allowed values of InterfaceTemplateRfRoleValue enum
var AllowedInterfaceTemplateRfRoleValueEnumValues = []InterfaceTemplateRfRoleValue{
	"ap",
	"station",
	"",
	"null",
}

func (v *InterfaceTemplateRfRoleValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceTemplateRfRoleValue(value)
	for _, existing := range AllowedInterfaceTemplateRfRoleValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceTemplateRfRoleValue", value)
}

// NewInterfaceTemplateRfRoleValueFromValue returns a pointer to a valid InterfaceTemplateRfRoleValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceTemplateRfRoleValueFromValue(v string) (*InterfaceTemplateRfRoleValue, error) {
	ev := InterfaceTemplateRfRoleValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceTemplateRfRoleValue: valid values are %v", v, AllowedInterfaceTemplateRfRoleValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceTemplateRfRoleValue) IsValid() bool {
	for _, existing := range AllowedInterfaceTemplateRfRoleValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceTemplate_rf_role_value value
func (v InterfaceTemplateRfRoleValue) Ptr() *InterfaceTemplateRfRoleValue {
	return &v
}

type NullableInterfaceTemplateRfRoleValue struct {
	value *InterfaceTemplateRfRoleValue
	isSet bool
}

func (v NullableInterfaceTemplateRfRoleValue) Get() *InterfaceTemplateRfRoleValue {
	return v.value
}

func (v *NullableInterfaceTemplateRfRoleValue) Set(val *InterfaceTemplateRfRoleValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceTemplateRfRoleValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceTemplateRfRoleValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceTemplateRfRoleValue(val *InterfaceTemplateRfRoleValue) *NullableInterfaceTemplateRfRoleValue {
	return &NullableInterfaceTemplateRfRoleValue{value: val, isSet: true}
}

func (v NullableInterfaceTemplateRfRoleValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceTemplateRfRoleValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
