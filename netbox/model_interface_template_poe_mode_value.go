/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.2 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// InterfaceTemplatePoeModeValue * `pd` - PD * `pse` - PSE
type InterfaceTemplatePoeModeValue string

// List of InterfaceTemplate_poe_mode_value
const (
	INTERFACETEMPLATEPOEMODEVALUE_PD    InterfaceTemplatePoeModeValue = "pd"
	INTERFACETEMPLATEPOEMODEVALUE_PSE   InterfaceTemplatePoeModeValue = "pse"
	INTERFACETEMPLATEPOEMODEVALUE_EMPTY InterfaceTemplatePoeModeValue = ""
	INTERFACETEMPLATEPOEMODEVALUE_NULL  InterfaceTemplatePoeModeValue = "null"
)

// All allowed values of InterfaceTemplatePoeModeValue enum
var AllowedInterfaceTemplatePoeModeValueEnumValues = []InterfaceTemplatePoeModeValue{
	"pd",
	"pse",
	"",
	"null",
}

func (v *InterfaceTemplatePoeModeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceTemplatePoeModeValue(value)
	for _, existing := range AllowedInterfaceTemplatePoeModeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceTemplatePoeModeValue", value)
}

// NewInterfaceTemplatePoeModeValueFromValue returns a pointer to a valid InterfaceTemplatePoeModeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceTemplatePoeModeValueFromValue(v string) (*InterfaceTemplatePoeModeValue, error) {
	ev := InterfaceTemplatePoeModeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceTemplatePoeModeValue: valid values are %v", v, AllowedInterfaceTemplatePoeModeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceTemplatePoeModeValue) IsValid() bool {
	for _, existing := range AllowedInterfaceTemplatePoeModeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceTemplate_poe_mode_value value
func (v InterfaceTemplatePoeModeValue) Ptr() *InterfaceTemplatePoeModeValue {
	return &v
}

type NullableInterfaceTemplatePoeModeValue struct {
	value *InterfaceTemplatePoeModeValue
	isSet bool
}

func (v NullableInterfaceTemplatePoeModeValue) Get() *InterfaceTemplatePoeModeValue {
	return v.value
}

func (v *NullableInterfaceTemplatePoeModeValue) Set(val *InterfaceTemplatePoeModeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceTemplatePoeModeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceTemplatePoeModeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceTemplatePoeModeValue(val *InterfaceTemplatePoeModeValue) *NullableInterfaceTemplatePoeModeValue {
	return &NullableInterfaceTemplatePoeModeValue{value: val, isSet: true}
}

func (v NullableInterfaceTemplatePoeModeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceTemplatePoeModeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
