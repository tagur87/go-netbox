/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.2 (3.6)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CustomFieldUiVisibilityValue * `read-write` - Read/write * `read-only` - Read-only * `hidden` - Hidden * `hidden-ifunset` - Hidden (if unset)
type CustomFieldUiVisibilityValue string

// List of CustomField_ui_visibility_value
const (
	CUSTOMFIELDUIVISIBILITYVALUE_READ_WRITE     CustomFieldUiVisibilityValue = "read-write"
	CUSTOMFIELDUIVISIBILITYVALUE_READ_ONLY      CustomFieldUiVisibilityValue = "read-only"
	CUSTOMFIELDUIVISIBILITYVALUE_HIDDEN         CustomFieldUiVisibilityValue = "hidden"
	CUSTOMFIELDUIVISIBILITYVALUE_HIDDEN_IFUNSET CustomFieldUiVisibilityValue = "hidden-ifunset"
)

// All allowed values of CustomFieldUiVisibilityValue enum
var AllowedCustomFieldUiVisibilityValueEnumValues = []CustomFieldUiVisibilityValue{
	"read-write",
	"read-only",
	"hidden",
	"hidden-ifunset",
}

func (v *CustomFieldUiVisibilityValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomFieldUiVisibilityValue(value)
	for _, existing := range AllowedCustomFieldUiVisibilityValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomFieldUiVisibilityValue", value)
}

// NewCustomFieldUiVisibilityValueFromValue returns a pointer to a valid CustomFieldUiVisibilityValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomFieldUiVisibilityValueFromValue(v string) (*CustomFieldUiVisibilityValue, error) {
	ev := CustomFieldUiVisibilityValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomFieldUiVisibilityValue: valid values are %v", v, AllowedCustomFieldUiVisibilityValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomFieldUiVisibilityValue) IsValid() bool {
	for _, existing := range AllowedCustomFieldUiVisibilityValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomField_ui_visibility_value value
func (v CustomFieldUiVisibilityValue) Ptr() *CustomFieldUiVisibilityValue {
	return &v
}

type NullableCustomFieldUiVisibilityValue struct {
	value *CustomFieldUiVisibilityValue
	isSet bool
}

func (v NullableCustomFieldUiVisibilityValue) Get() *CustomFieldUiVisibilityValue {
	return v.value
}

func (v *NullableCustomFieldUiVisibilityValue) Set(val *CustomFieldUiVisibilityValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldUiVisibilityValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldUiVisibilityValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldUiVisibilityValue(val *CustomFieldUiVisibilityValue) *NullableCustomFieldUiVisibilityValue {
	return &NullableCustomFieldUiVisibilityValue{value: val, isSet: true}
}

func (v NullableCustomFieldUiVisibilityValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldUiVisibilityValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
